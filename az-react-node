#!/bin/bash

## Check if npx is installed
r=$(npx --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo npx must be installed
    echo "run 'npm install npx'"
    exit
fi

## Check if yarn is installed
r=$(yarn --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo yarn must be installed
    echo "run 'npm install yarn'"
    exit
fi


if [ ! -d "client" ] && [ ! -d "server" ] && [ ! -d "docker" ] && [ ! -d "helm" ]
then
    mkdir client
    mkdir server
    mkdir helm
    mkdir -p docker/nginx
else
    echo client, server, helm and or docker directories already exists
    exit
fi


### CLIENT
pushd client
npx create-react-app . --template typescript
rm package-lock.json
yarn
sed -i.bak 's/\("version".*\)/\1\n  "proxy": "http:\/\/localhost:9000",/g' package.json
rm package.json.bak

yarn add graphql
yarn add @apollo/client


pushd src
rm App.tsx
cat <<END >> App.tsx
import {ApolloClient, ApolloProvider, HttpLink, InMemoryCache} from "@apollo/client"
import './App.css'
import Example from "./Example"

const client = new ApolloClient<unknown>({
    cache: new InMemoryCache(),
    link: new HttpLink({
        uri: '/api/graphql'
    })
})

function App() {

    return (
        <ApolloProvider client={client}>
            <div>
                <img src={'/api/example/iamsparticus'}/>
            </div>
            <Example></Example>
        </ApolloProvider>
    )
}

export default App
END

cat <<END >> Example.tsx
import {gql, useQuery} from "@apollo/client"

const ALL_USERS = gql\`
query {
    Users {
        id
        firstName
        lastName
    }
}    
\`

const Example = () => {
    const {loading, data} = useQuery(ALL_USERS)

    if (loading) return <p>Loading...</p>

    return <div style={{display: "flex", flexWrap: "wrap"}}>
        {data.Users.map((record: {firstName: string, lastName: string, id: string}) =>
            <div key={record.id} style={{padding: '10px'}}>
                {record.firstName} {record.lastName}
            </div>
        )}
    </div>
}

export default Example
END


### SERVER
popd
popd
pushd server
npm init -y
yarn add express
yarn add axios
yarn add express-promise-router
yarn add nodemon -D
yarn add graphql
yarn add express-graphql
yarn add casual -D

sed -i.bak 's/index\.js/server.js/g' package.json
rm package.json.bak

sed -i.bak 's/\("test".*\)/\1,\n    "start": "node server",\n    "dev": "nodemon server"/g' package.json
rm package.json.bak

cat <<END >> server.js
const express = require('express')
const Router  = require("express-promise-router")
const axios = require('axios')
const {graphqlHTTP} = require('express-graphql')

const app = express()
const router = Router()

const dev = process.env.ENV !== 'production'
const port = process.env.APPLICATION_PORT || 9000

app.use(router)
router.get('/api', async (req, res) => {
    res.json({message: "api is active"})
})

router.get('/api/example/:str', async (req, res) => {
    const str = req.params['str']
    const url = \`https://robohash.org/\${str}.png?set=set4\`
    console.log(\`loading url: \${url}\`)
    return axios.get(url, {
        responseType: 'arraybuffer'
    }).then(r => {
        const headers = {'Content-Type': r.headers['content-type']}
        res.writeHead(200, headers)
        return res.end(Buffer.from(r.data), 'binary')
    })
})

const schema = require('./data/schema')

app.use('/api/graphql', graphqlHTTP({
    schema,
    graphiql: dev,
    pretty: dev
}))


const casual = require('casual');
const mock = require('./data/mock')
new Array(100).fill(1).forEach((_, idx) => {
    console.log('generate')
    mock.userList.push({
        id: \`\${idx}\`,
        firstName: casual.first_name,
        lastName: casual.last_name
    })
})


app.listen(port, () => {console.log(\`Server started on port \${port}\`)})
END


mkdir -p data/mutations data/queries data/types
pushd data

cat <<END >> mock.js
module.exports = {
    userList: []
}
END

cat <<END >> schema.js
const {GraphQLSchema, GraphQLObjectType} = require("graphql/type");
const queries = require('./queries')
const mutations = require('./mutations')

module.exports = new GraphQLSchema({
    query: new GraphQLObjectType({
        name: 'Query',
        fields: queries,
        description: "Domain Queries"
    }),
    mutation: new GraphQLObjectType({
        name: 'Mutation',
        fields: mutations,
        description: "Domain Mutations"
    })
})
END

pushd mutations
cat <<END >> index.js
const {GraphQLString} = require('graphql')
const UserType = require("../types/user")

const mock = require('../mock')

module.exports = {
    createUser: {
        type: UserType,
        args: {
            firstName: {type: GraphQLString},
            lastName: {type: GraphQLString},
        },
        description: 'Create User Record',
        resolve(parent, args) {
            return new Promise((resolve) => {
                const id = mock.userList.length + 1
                mock.userList.push({
                    id,
                    firstName: args.firstName,
                    lastName: args.lastName,
                })
                resolve(mock.userList.filter((d) => d.id === id)[0])
            })
        }
    }
}
END

popd
pushd queries

cat <<END >> index.js
const {GraphQLList} = require("graphql/type");
const User = require('./user')
const UserType = require('../types/user')

const mock = require('../mock')

module.exports = {
    User,
    Users: {
        type: new GraphQLList(UserType),
        resolve: (root, args) => {
            return new Promise((resolve) => {
                resolve(mock.userList)
            })
        }
    }
}
END

cat <<END >> user.js
const {GraphQLNonNull, GraphQLID} = require("graphql/type");
const mock = require('../mock')
const UserType = require('../types/user')
module.exports = {
    type: UserType,
    args: {
        id: {
            name: 'id',
            type: new GraphQLNonNull(GraphQLID)
        }
    },
    resolve: (root, args) => {
        return new Promise((resolve) => {
            resolve(
                mock.userList.filter((d) => d.id === args.id)[0]
            )
        })
    }
}
END

popd
pushd types

cat <<END >> user.js
const {GraphQLObjectType, GraphQLNonNull, GraphQLID, GraphQLString} = require("graphql/type")

module.exports = new GraphQLObjectType({
    name: 'User',
    fields: () => ({
        id: {type: new GraphQLNonNull(GraphQLID)},
        firstName: {type: GraphQLString},
        lastName: {type: GraphQLString},
    })
})
END

popd
popd
popd

### DOCKER
pushd docker/nginx

cat <<END >> default.conf
server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass http://localhost:9000;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }
}
END

popd
cat <<END >> Dockerfile
FROM nginx:alpine

### CLIENT
RUN rm -rf /usr/share/nginx/html/*

COPY docker/nginx/default.conf /etc/nginx/conf.d/
COPY client/build/ /usr/share/nginx/html/

### SERVER
RUN apk --update add nodejs supervisor

COPY service_script.conf /
WORKDIR app
COPY server/ .

EXPOSE 80

CMD ["supervisord", "-c", "/service_script.conf"]
END

cat <<END >> service_script.conf
[supervisord]
nodaemon=true

[program:nginx]
command=nginx -g "daemon off;"
autorestart=true
stderr_logfile=/dev/stdout
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0

[program:nodejs]
command=node server
autostart=true
autorestart=true
stderr_logfile=/dev/stdout
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
END


### HELM
pushd helm
helm create App
mv App/* .
rm -rf App

### README
popd
cat <<END >> README.md
This application was generated by az-react-node. This is a compound application
where the frontend and the backend are tightly coupled. To develop you will
need to run both the backend (nodejs) and the frontend (reactjs).

### Backend
\`\`\`bash
cd server
yarn dev
\`\`\`

### Client
\`\`\`bash
cd client
yarn start
\`\`\`

END
