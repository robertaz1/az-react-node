#!/bin/bash

## Check if npx is installed
r=$(npx --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo npx must be installed
    echo "run 'npm install npx'"
    exit
fi

## Check if yarn is installed
r=$(yarn --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo yarn must be installed
    echo "run 'npm install yarn'"
    exit
fi


if [ ! -d "client" ] && [ ! -d "server" ]
then
    mkdir client
    mkdir server
else
    echo client and or server directories already exists
    exit
fi

### CLIENT
pushd client
npx create-react-app . --template typescript
rm package-lock.json
yarn
sed -i.bak 's/\("version".*\)/\1\n  "proxy": "http:\/\/localhost:3000",/g' package.json
rm package.json.bak

### SERVER
popd
pushd server
npm init -y
yarn add express
yarn add axios
yarn add express-promise-router
yarn add nodemon -D

sed -i.bak 's/index\.js/server.js/g' package.json
rm package.json.bak

sed -i.bak 's/\("test".*\)/\1,\n    "start": "node server",\n    "dev": "nodemon server"/g' package.json
rm package.json.bak

cat <<END >> server.js
const express = require('express')
const Router  = require("express-promise-router")
const axios = require('axios')

const app = express()
const router = Router()
app.use(router)

const port = process.env.APPLICATION_PORT || 3000

router.get('/api', async (req, res) => {
    res.json({message: "api is active"})
})

router.get('/api/example/:str', async (req, res) => {
    const str = req.params['str']
    const url = \`https://robohash.org/\${str}.png?set=set5\`
    console.log(\`loading url: \${url}\`)
    return axios.get(url, {
        responseType: 'arraybuffer' 
    }).then(r => {
        const headers = {'Content-Type': r.headers['content-type']}
        res.writeHead(200, headers)
        return res.end(Buffer.from(r.data), 'binary')
    })
})

app.listen(port, () => {console.log(\`Server started on port \${port}\`)})
END



