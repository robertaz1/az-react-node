#!/bin/bash

## Check if npx is installed
r=$(npx --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo npx must be installed
    echo "run 'npm install npx'"
    exit
fi

## Check if yarn is installed
r=$(yarn --version /dev/null 2>&1)

if [ $? != 0 ]
then
    echo yarn must be installed
    echo "run 'npm install yarn'"
    exit
fi


if [ ! -d "client" ] && [ ! -d "server" ] && [ ! -d "docker" ] && [ ! -d "helm" ]
then
    mkdir client
    mkdir server
    mkdir helm
    mkdir -p docker/nginx
else
    echo client, server, helm and or docker directories already exists
    exit
fi


### CLIENT
pushd client
npx create-react-app . --template typescript
rm package-lock.json
yarn
sed -i.bak 's/\("version".*\)/\1\n  "proxy": "http:\/\/localhost:9000",/g' package.json
rm package.json.bak

pushd src
rm App.tsx
cat <<END >> App.tsx
import './App.css';

function App() {

    return (
        <div>
            <img src={'/api/example/iamsparticus'}/>
        </div>
    );
}

export default App;
END


### SERVER
popd
popd
pushd server
npm init -y
yarn add express
yarn add axios
yarn add express-promise-router
yarn add nodemon -D

sed -i.bak 's/index\.js/server.js/g' package.json
rm package.json.bak

sed -i.bak 's/\("test".*\)/\1,\n    "start": "node server",\n    "dev": "nodemon server"/g' package.json
rm package.json.bak

cat <<END >> server.js
const express = require('express')
const Router  = require("express-promise-router")
const axios = require('axios')

const app = express()
const router = Router()
app.use(router)

const port = process.env.APPLICATION_PORT || 9000

router.get('/api', async (req, res) => {
    res.json({message: "api is active"})
})

router.get('/api/example/:str', async (req, res) => {
    const str = req.params['str']
    const url = \`https://robohash.org/\${str}.png?set=set4\`
    console.log(\`loading url: \${url}\`)
    return axios.get(url, {
        responseType: 'arraybuffer' 
    }).then(r => {
        const headers = {'Content-Type': r.headers['content-type']}
        res.writeHead(200, headers)
        return res.end(Buffer.from(r.data), 'binary')
    })
})

app.listen(port, () => {console.log(\`Server started on port \${port}\`)})
END


### DOCKER
popd
pushd docker/nginx

cat <<END >> default.conf
server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass http://localhost:9000;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }
}
END

popd
cat <<END >> Dockerfile
FROM nginx:alpine

### CLIENT
RUN rm -rf /usr/share/nginx/html/*

COPY docker/nginx/default.conf /etc/nginx/conf.d/
COPY client/build/ /usr/share/nginx/html/

### SERVER
RUN apk --update add nodejs supervisor

COPY service_script.conf /
WORKDIR app
COPY server/ .

EXPOSE 80

CMD ["supervisord", "-c", "/service_script.conf"]
END

cat <<END >> service_script.conf
[supervisord]
nodaemon=true

[program:nginx]
command=nginx -g "daemon off;"
autorestart=true
stderr_logfile=/dev/stdout
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0

[program:nodejs]
command=node server
autostart=true
autorestart=true
stderr_logfile=/dev/stdout
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
END


### HELM
pushd helm
helm create App
mv App/* .
rm -rf App

### README
popd
cat <<END >> README.md
This application was generated by az-react-node. This is a compound application
where the frontend and the backend are tightly coupled. To develop you will
need to run both the backend (nodejs) and the frontend (reactjs).

### Backend
\`\`\`bash
cd server
yarn dev
\`\`\`

### Client
\`\`\`bash
cd client
yarn start
\`\`\`

END
